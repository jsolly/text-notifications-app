---
// Sample messages that showcase different types of notifications
import { Image } from "astro:assets";
import phoneFrame from "../../../public/assets/phone-frame.svg";

const PREVIEW_MESSAGES = [
	{
		text: "üåÖ Sunset Alert: Beautiful sunset expected in 15 minutes at Fairmount Park. Perfect photo opportunity!",
		type: "received",
	},
	{
		text: "Where's the best viewing spot?",
		type: "sent",
	},
	{
		text: "Belmont Plateau offers the best skyline view with the sunset. Parking available at Chamounix Drive.",
		type: "received",
	},
	{
		text: "‚ö° Weather Alert: Thunderstorm warning in Philadelphia until 8 PM. Seek shelter and avoid travel if possible.",
		type: "received",
	},
	{
		text: "Will this affect tomorrow's forecast?",
		type: "sent",
	},
	{
		text: "Tomorrow is expected to be clear with a high of 78¬∞F after the storm system passes through tonight.",
		type: "received",
	},
	{
		text: "üé® Art Event: New exhibition opening at Philadelphia Museum of Art this Saturday from 10 AM to 6 PM. Free admission for the first 100 visitors!",
		type: "received",
	},
	{
		text: "What's the exhibition about?",
		type: "sent",
	},
	{
		text: "It's featuring contemporary Philadelphia artists with a focus on urban landscapes and community stories. There will also be interactive installations for visitors.",
		type: "received",
	},
	{
		text: "üèÉ‚Äç‚ôÇÔ∏è Fitness Reminder: Your morning run is scheduled for 7 AM tomorrow. Weather forecast: 65¬∞F, partly cloudy.",
		type: "received",
	},
	{
		text: "Can you suggest an alternative route for tomorrow?",
		type: "sent",
	},
	{
		text: "Try the Schuylkill River Trail starting at Race Street - it's 0.5 miles longer but has less elevation change and better morning shade.",
		type: "received",
	},
	{
		text: "üöá Transit Alert: SEPTA Regional Rail experiencing 15-minute delays on the Paoli/Thorndale Line due to signal issues.",
		type: "received",
	},
	{
		text: "Are shuttle buses available?",
		type: "sent",
	},
	{
		text: "No shuttle service has been activated yet. Delays are expected to resolve within the hour. Consider the Market-Frankford Line as an alternative.",
		type: "received",
	},
];

// Generate a unique ID for this component instance
const uniqueId = `message-preview-${Math.random().toString(36).substring(2, 9)}`;
---

<div 
  class="phone-preview-container relative mx-auto my-8 max-w-[260px]"
  id={uniqueId}
>
  <!-- Phone frame with SVG -->
  <div class="phone-frame relative">
    <Image src={phoneFrame} alt="Phone frame" class="w-full h-auto" />
    
    <!-- Messages container positioned inside the phone frame -->
    <div class="messages-container absolute top-[40px] left-[10px] right-[10px] bottom-[30px] rounded-[22px] overflow-hidden">
      <div class="messages-scroll p-4">
        <div class="messages-wrapper flex flex-col space-y-3">
          {PREVIEW_MESSAGES.map((message, index) => (
            <div class={`message-bubble max-w-[85%] ${message.type === 'sent' ? 'ml-auto bg-indigo-500 text-white rounded-t-lg rounded-l-lg' : 'bg-gray-100 text-gray-800 rounded-t-lg rounded-r-lg'} p-3`} data-index={index}>
              <p class="text-sm leading-tight">{message.text}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .message-bubble {
    transform-origin: bottom;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    opacity: 0;
    display: none;
  }

  .message-bubble.visible {
    display: block;
    opacity: 1;
    animation: fadeIn 0.3s ease-out forwards;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .messages-container {
    background-color: #F8FAFC;
  }

  .messages-scroll {
    height: 100%;
    overflow-y: auto;
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE and Edge */
  }

  .messages-scroll::-webkit-scrollbar {
    display: none; /* Chrome, Safari, Opera */
  }
</style>

<script define:vars={{ uniqueId }}>
  // Simple animation script
  document.addEventListener('DOMContentLoaded', function() {
    const container = document.getElementById(uniqueId);
    if (!container) return;
    
    const messages = Array.from(container.querySelectorAll('.message-bubble'));
    if (!messages.length) return;
    
    const scrollContainer = container.querySelector('.messages-scroll');
    if (!scrollContainer) return;
    
    let currentIndex = 0;
    const DELAY = 1500; // Increased delay between messages
    let animationInProgress = false;
    
    function animateMessages() {
      if (animationInProgress) return;
      
      animationInProgress = true;
      
      // Reset all messages
      messages.forEach(msg => {
        msg.classList.remove('visible');
        msg.style.display = 'none';
      });
      
      // Reset scroll position to top
      scrollContainer.scrollTop = 0;
      
      // Start animation sequence
      currentIndex = 0;
      showNextMessage();
    }
    
    function showNextMessage() {
      if (currentIndex < messages.length) {
        const message = messages[currentIndex];
        
        // Make sure previous animations are complete
        setTimeout(() => {
          // Show the message
          message.style.display = 'block';
          
          // Force a reflow before adding the visible class
          void message.offsetWidth;
          
          message.classList.add('visible');
          
          // Wait for animation to complete before scrolling
          setTimeout(() => {
            // Calculate how much to scroll to keep the latest message in view
            const messageBottom = message.offsetTop + message.offsetHeight;
            const containerHeight = scrollContainer.clientHeight;
            const currentScroll = scrollContainer.scrollTop;
            const scrollTarget = messageBottom - containerHeight + 20; // 20px padding
            
            // Only scroll if needed (if the message is below the visible area)
            if (scrollTarget > currentScroll) {
              // Smooth scroll to the new position
              scrollContainer.scrollTo({
                top: scrollTarget,
                behavior: 'smooth'
              });
            }
            
            // Wait for scroll to complete before showing next message
            currentIndex++;
            setTimeout(showNextMessage, DELAY);
          }, 300); // Wait for animation to complete
        }, 50); // Small delay to ensure clean transition
      } else {
        // Wait before restarting
        setTimeout(() => {
          animationInProgress = false;
          animateMessages();
        }, 4000); // Longer pause at the end of the sequence
      }
    }
    
    // Create intersection observer to start animation when visible
    const observer = new IntersectionObserver(entries => {
      if (entries[0].isIntersecting && !animationInProgress) {
        animateMessages();
      }
    }, { threshold: 0.1 });
    
    observer.observe(container);
    
    // Also start animation if already visible
    if (container.getBoundingClientRect().top < window.innerHeight) {
      animateMessages();
    }
  });
</script> 
---
interface Props {
	id: string;
	value: string;
	label: string;
	description: string;
	badgeType: "instant" | "scheduled" | "daily";
	imageUrl?: string;
}

const { id, value, label, description, badgeType, imageUrl } = Astro.props;

// Badge styling based on type
const badgeStyles = {
	instant: {
		text: "âš¡ instant",
		color: "text-red-500",
		bgColor: "bg-red-50",
		borderColor: "border-red-200",
	},
	scheduled: {
		text: "ðŸ•’ scheduled",
		color: "text-blue-500",
		bgColor: "bg-blue-50",
		borderColor: "border-blue-200",
	},
	daily: {
		text: "ðŸ“… daily",
		color: "text-green-500",
		bgColor: "bg-green-50",
		borderColor: "border-green-200",
	},
};

const badge = badgeStyles[badgeType];
---

<style>
  .checkbox-wrapper {
    position: relative;
  }

  .animated-checkbox {
    transform-origin: center;
    transition: all 0.2s ease;
  }

  .animated-checkbox:checked {
    animation: checkbox-pop 0.3s ease-in-out;
  }

  @keyframes checkbox-pop {
    0% { transform: scale(1); }
    50% { transform: scale(1.2); }
    100% { transform: scale(1); }
  }
</style>

<div class="p-4 rounded-lg border border-slate-200 bg-white shadow-sm hover:shadow-md hover:border-slate-300 transition-all duration-200 cursor-pointer" data-notification-card>
  <div class="flex items-start space-x-4">
    <div class="checkbox-wrapper">
      <input 
        type="checkbox" 
        id={id} 
        name={id} 
        value="true"
        aria-describedby={`${id}-description`}
        class="animated-checkbox h-4 w-4 min-h-[16px] min-w-[16px] mt-1 text-blue-600 rounded border-slate-300 focus:ring-blue-500 cursor-pointer"
        data-checkbox
      >
    </div>
    <div class="flex-1">
      <div class="flex items-start justify-between gap-4">
        <div>
          <div class="flex items-center gap-2">
            <label for={id} class="text-slate-700 cursor-pointer text-sm font-medium">
              {label}
            </label>
            <span class={`inline-flex items-center text-xs font-medium ${badge.color}`}>
              {badge.text}
            </span>
          </div>
          <p id={`${id}-description`} class="text-xs text-slate-500 mt-2">
            {description}
          </p>
        </div>
        {imageUrl && (
          <img 
            src={imageUrl} 
            alt="" 
            class="w-20 h-20 sm:w-24 sm:h-24 rounded-lg object-cover flex-shrink-0 border border-slate-200"
            loading="lazy"
          />
        )}
      </div>
    </div>
  </div>
</div>

<script>
  // Make the entire card clickable
  document.querySelectorAll('[data-notification-card]').forEach(card => {
    card.addEventListener('click', (event) => {
      const target = event.target as HTMLElement;
      const checkbox = card.querySelector('[data-checkbox]') as HTMLInputElement;
      
      // Check if the click is directly on the checkbox (to avoid double toggling)
      if (target.tagName === 'INPUT') {
        return;
      }
      
      // Check if the click is on or within a label (including badge text)
      if (target.tagName === 'LABEL' || target.closest('label')) {
        // For label clicks, let the native behavior handle it
        return;
      }
      
      // For all other clicks on the card, toggle the checkbox
      checkbox.checked = !checkbox.checked;
      
      // Trigger animation by removing and re-adding the class
      if (checkbox.checked) {
        checkbox.style.animation = 'none';
        checkbox.offsetHeight; // Trigger reflow
        checkbox.style.animation = '';
      }
    });
  });
</script> 
---
import { neon } from "@neondatabase/serverless";
import PhoneInput from "./contact-info/PhoneInput.vue";
import CityInput from "./contact-info/CityInput.vue";
import type { City, CityOption } from "@text-notifications/shared";
import { CONTACT_SCHEMA } from "@text-notifications/shared";

const sql = neon(import.meta.env.DATABASE_URL);

// Fetch all city records at build time
const cities = (await sql`
	SELECT 
		c.id,
		c.name,
		c.state_code,
		c.country_code
	FROM Cities c
	ORDER BY c.name
`) as City[];

// Create a searchable format for Fuse.js
const cityOptions: CityOption[] = cities.map((city) => ({
	value: city.id,
	label: [city.name, city.state_code || city.name, city.country_code]
		.filter(Boolean)
		.join(", "),
}));

// Query the database to get the user count at build time
let formattedUserCount = "10,000"; // Default fallback value
try {
	const userCountResult = await sql`SELECT COUNT(*) AS count FROM users`;
	const userCount = userCountResult[0]?.count || 0;
	formattedUserCount = new Intl.NumberFormat("en-US").format(userCount);
} catch (error: unknown) {
	console.error("Error fetching user count:", error);
	// Use the default fallback value
}

const TURNSTILE_SITE_KEY = import.meta.env.PUBLIC_TURNSTILE_SITE_KEY;
const isDev = import.meta.env.DEV;
---

<section class="contact-information">
	<div class="flex items-center justify-between mb-4">
		<h2 class="text-2xl font-bold text-blue-900">Sign Up</h2>
		
		<!-- User Count badge -->
		<div class="flex items-center bg-blue-50 px-1.5 py-0.5 md:px-2.5 md:py-1 rounded-md text-xs md:text-sm">
			<svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 md:h-4 md:w-4 text-blue-600 mr-1 md:mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
			</svg>
			<span class="text-blue-700">Join {formattedUserCount}+ users</span>
		</div>
	</div>
	
	<p class="text-sm md:text-base text-slate-800 mb-6">We'll use this information to send you text notifications. Your data is kept private and secure.</p>
	
	<div class="grid grid-cols-1 gap-4">
		<div class="relative">
			<label for="name" class="block text-sm font-medium text-slate-700 mb-1">
				{CONTACT_SCHEMA.preferred_name.form_label}
			</label>
			<input
				type="text"
				id="name"
				name="name"
				placeholder={CONTACT_SCHEMA.preferred_name.placeholder}
				required={CONTACT_SCHEMA.preferred_name.required}
				class="w-full px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
			/>
		</div>
		<PhoneInput client:only="vue" />
		<CityInput client:only="vue" {cityOptions} />
	</div>

	<div class="mt-8 space-y-4">
		{!isDev && (
			<div 
				class="cf-turnstile" 
				data-sitekey={TURNSTILE_SITE_KEY}
				data-callback="onTurnstileCallback"
				data-theme="light"
			></div>
		)}

		<button type="submit" 
			id="submit_button"
			style="cursor: pointer !important;"
			class="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors font-medium shadow-md cursor-pointer">
			Sign Up for Notifications
		</button>

		<p class="text-xs text-slate-500 text-center">
			By signing up, you agree to receive text messages about your selected events. 
			Message and data rates may apply.
		</p>
	</div>
</section>

<!-- HTMX and extensions -->
<script is:inline src="https://unpkg.com/htmx.org@2.0.4" integrity="sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+" crossorigin="anonymous"></script>
<script is:inline src="https://unpkg.com/htmx-ext-response-targets@2.0.3/response-targets.js" crossorigin="anonymous"></script>

<!-- Add Turnstile Verification only in production -->
{!isDev && <script is:inline src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>}

<script>
	// In HTMX 2.0, selfRequestsOnly defaults to true (blocks cross-origin requests)
	// @ts-ignore
	window.htmx.config.selfRequestsOnly = false;
	
	import { setupFormValidation } from '../utils/formValidationUtils';
	import { createAnimationManager } from '../utils/animationManagerUtils';
	import { createAutoAdvanceManager } from '../utils/autoAdvanceUtils';
	import type { HtmxEvent } from '../utils/types';
	
	// Initialize form validation state
	let isPhoneValid = false, isCityValid = false;
	
	// Setup form validation with our utility
	const validationUtils = setupFormValidation({
		setPhoneValid: (isValid: boolean) => isPhoneValid = isValid,
		setCityValid: (isValid: boolean) => isCityValid = isValid
	});
	
	const animationManager = createAnimationManager();
	createAutoAdvanceManager(); // We don't call this anywhere, but it needs to be initialized

	// Expose Turnstile callback to window
	window.onTurnstileCallback = (token: string): void => {
		const form = document.getElementById("signup_form");
		if (form) {
			form.setAttribute(
				"hx-headers",
				JSON.stringify({
					"cf-turnstile-response": token,
				}),
			);
		}
	};

	const form = document.getElementById('signup_form') as HTMLFormElement;
	
	// Function to highlight the phone number input without showing an error
	function highlightPhoneInput(): void {
		// Create and dispatch a custom event to highlight the phone input
		const event = new CustomEvent("highlight_phone_attention", {
			bubbles: true
		});
		document.dispatchEvent(event);
	}
	
	// Ensure button is in correct state on page load
	document.addEventListener('DOMContentLoaded', () => {
		const button = document.getElementById('submit_button') as HTMLButtonElement;
		if (button) {
			// Make sure button is enabled and has correct cursor on page load
			button.disabled = false;
			button.classList.remove('cursor-not-allowed', 'opacity-75');
			button.style.cursor = "pointer";
			
			// Add event listeners to ensure cursor is always pointer
			button.addEventListener('mouseenter', () => {
				button.style.cursor = "pointer";
			});
		}
	});

	
	/************************************************
	 *                                              *
	 *        PRE-SUBMISSION VALIDATION             *
	 *                                              *
	 ************************************************/
	form.addEventListener('htmx:beforeRequest', function(event: Event) {
		// Use our utility to get validation status
		const validationStatus = validationUtils.getValidationStatus(isPhoneValid, isCityValid);
		
		// If validation fails, prevent form submission and highlight invalid fields
		if (!validationStatus.isValid) {
			event.preventDefault();
			
			// Highlight invalid fields with red borders
			validationUtils.highlightInvalidFields(isPhoneValid, isCityValid);
			
			// Scroll to the first invalid field
			const invalidField = !isPhoneValid ? 
				document.getElementById('phone_number') : 
				document.getElementById('city_search');
				
			if (invalidField) {
				invalidField.scrollIntoView({ behavior: 'smooth', block: 'center' });
				invalidField.focus();
			}
			
			return;
		}

		// The form is valid, so we need to update the button state to show that it's submitting
		const button = document.getElementById('submit_button') as HTMLButtonElement;
		button.innerHTML = "Submitting...";
		button.style.cursor = "not-allowed";
		button.classList.add("opacity-75");
		button.disabled = true;
	});
	
	/************************************************
	 *                                              *
	 *        AFTER SETTLE VALIDATION              *
	 *                                              *
	 ************************************************/
	document.addEventListener('htmx:afterSettle', function(event: Event) {
		const htmxEvent = event as HtmxEvent;
		const button = document.getElementById('submit_button') as HTMLButtonElement;
		
		const isSuccess = button.hasAttribute('data-success');
		const isError = button.hasAttribute('data-error');
		const is4xxError = htmxEvent.detail?.xhr?.status >= 400 && htmxEvent.detail?.xhr?.status < 500;
		const is5xxError = htmxEvent.detail?.xhr?.status >= 500 && htmxEvent.detail?.xhr?.status < 600;

		// If the signup was successful, play the success animation and then reload the page
		if (isSuccess) {
			animationManager.playSuccessAnimation(() => {
				window.location.reload();
			});

		// If the signup was not successful, set to button to a try again state after 3 seconds of showing the error (from the server)
		} else if (isError || is4xxError || is5xxError) {
			setTimeout(() => {
				// Reset button to initial state but with "Try again" text
				button.classList.remove("opacity-75", "cursor-not-allowed");
				button.className = "w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors font-medium shadow-md cursor-pointer";
				button.innerHTML = "Try to Sign Up Again";
				button.disabled = false;


				// If the error is a duplicate phone number, highlight the phone number input to draw user's attention
				const errorText = button.textContent;
				if (errorText.includes('phone number already exists')) {
					highlightPhoneInput();
					
					const phoneInput = document.getElementById('phone_number');
					if (phoneInput) {
						setTimeout(() => {
							phoneInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
							phoneInput.focus();
						}, 100); // Small delay to ensure the UI has updated
					}
				}
			}, 3000);
		}
	});
</script>

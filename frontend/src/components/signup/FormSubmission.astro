---
const TURNSTILE_SITE_KEY = import.meta.env.PUBLIC_TURNSTILE_SITE_KEY;
const isDev = import.meta.env.DEV;
const SIGNUP_API_URL = import.meta.env.PUBLIC_SIGNUP_API_URL;

// Define the Turnstile callback on the window object
declare global {
	interface Window {
		onTurnstileCallback: (token: string) => void;
	}
}
---

<form 
	id="signup_form"
	class="space-y-8 pt-4"
	hx-post={SIGNUP_API_URL}
	hx-target="#submit_button"
	hx-target-4*="#submit_button"
	hx-target-5*="#submit_button"
	hx-swap="outerHTML"
	hx-ext="response-targets"
	novalidate
>
	<slot />

	<div class="space-y-4 pt-2 max-w-md mx-auto">
		{!isDev && (
			<div 
				class="cf-turnstile" 
				data-sitekey={TURNSTILE_SITE_KEY}
				data-callback="onTurnstileCallback"
				data-theme="light"
			></div>
		)}

		<button type="submit" 
			id="submit_button"
			style="cursor: pointer !important;"
			class="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors font-medium shadow-md cursor-pointer">
			Sign Up for Notifications
		</button>

		<p class="text-xs text-slate-500 text-center">
			By signing up, you agree to receive text messages about your selected events. 
			Message and data rates may apply.
		</p>
	</div>
</form>

<!-- HTMX and extensions -->
<script is:inline src="https://unpkg.com/htmx.org@2.0.4" integrity="sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+" crossorigin="anonymous"></script>
<script is:inline src="https://unpkg.com/htmx-ext-response-targets@2.0.3/response-targets.js" crossorigin="anonymous"></script>

<!-- Add Turnstile Verification only in production -->
{!isDev && <script is:inline src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>}

<script>
	// In HTMX 2.0, selfRequestsOnly defaults to true (blocks cross-origin requests)
	// @ts-ignore
	window.htmx.config.selfRequestsOnly = false;
	
	import { setupFormValidation } from '../utils/formValidationUtils';
	import { createAnimationManager } from '../utils/animationManagerUtils';
	import { createAutoAdvanceManager } from '../utils/autoAdvanceUtils';
	import type { HtmxEvent } from '../utils/types';
	
	// Initialize form validation state
	let isPhoneValid = false, isCityValid = false;
	
	// Setup form validation with our utility
	const validationUtils = setupFormValidation({
		setPhoneValid: (isValid: boolean) => isPhoneValid = isValid,
		setCityValid: (isValid: boolean) => isCityValid = isValid
	});
	
	const animationManager = createAnimationManager();
	createAutoAdvanceManager(); // We don't call this anywhere, but it needs to be initialized

	// Expose Turnstile callback to window
	window.onTurnstileCallback = (token: string): void => {
		const form = document.getElementById("signup_form");
		if (form) {
			form.setAttribute(
				"hx-headers",
				JSON.stringify({
					"cf-turnstile-response": token,
				}),
			);
		}
	};

	const form = document.getElementById('signup_form') as HTMLFormElement;
	
	// Function to highlight the phone number input without showing an error
	function highlightPhoneInput(): void {
		// Create and dispatch a custom event to highlight the phone input
		const event = new CustomEvent("highlight_phone_attention", {
			bubbles: true
		});
		document.dispatchEvent(event);
	}
	
	// Ensure button is in correct state on page load
	document.addEventListener('DOMContentLoaded', () => {
		const button = document.getElementById('submit_button') as HTMLButtonElement;
		if (button) {
			// Make sure button is enabled and has correct cursor on page load
			button.disabled = false;
			button.classList.remove('cursor-not-allowed', 'opacity-75');
			button.style.cursor = "pointer";
			
			// Add event listeners to ensure cursor is always pointer
			button.addEventListener('mouseenter', () => {
				button.style.cursor = "pointer";
			});
		}
	});

	
	/************************************************
	 *                                              *
	 *        PRE-SUBMISSION VALIDATION             *
	 *                                              *
	 ************************************************/
	form.addEventListener('htmx:beforeRequest', function(event: Event) {
		// Use our utility to get validation status
		const validationStatus = validationUtils.getValidationStatus(isPhoneValid, isCityValid);
		
		// If validation fails, prevent form submission and highlight invalid fields
		if (!validationStatus.isValid) {
			event.preventDefault();
			
			// Highlight invalid fields with red borders
			validationUtils.highlightInvalidFields(isPhoneValid, isCityValid);
			
			// Scroll to the first invalid field
			const invalidField = !isPhoneValid ? 
				document.getElementById('phone_number') : 
				document.getElementById('city_search');
				
			if (invalidField) {
				invalidField.scrollIntoView({ behavior: 'smooth', block: 'center' });
				invalidField.focus();
			}
			
			return;
		}

		// The form is valid, so we need to update the button state to show that it's submitting
		const button = document.getElementById('submit_button') as HTMLButtonElement;
		button.innerHTML = "Submitting...";
		button.style.cursor = "not-allowed";
		button.classList.add("opacity-75");
		button.disabled = true;
	});
	
	/************************************************
	 *                                              *
	 *        AFTER SETTLE VALIDATION              *
	 *                                              *
	 ************************************************/
	document.addEventListener('htmx:afterSettle', function(event: Event) {
		const htmxEvent = event as HtmxEvent;
		const button = document.getElementById('submit_button') as HTMLButtonElement;
		
		const isSuccess = button.hasAttribute('data-success');
		const isError = button.hasAttribute('data-error');
		const is4xxError = htmxEvent.detail?.xhr?.status >= 400 && htmxEvent.detail?.xhr?.status < 500;
		const is5xxError = htmxEvent.detail?.xhr?.status >= 500 && htmxEvent.detail?.xhr?.status < 600;

		// If the signup was successful, play the success animation and then reload the page
		if (isSuccess) {
			animationManager.playSuccessAnimation(() => {
				window.location.reload();
			});

		// If the signup was not successful, set to button to a try again state after 3 seconds of showing the error (from the server)
		} else if (isError || is4xxError || is5xxError) {
			setTimeout(() => {
				// Reset button to initial state but with "Try again" text
				button.classList.remove("opacity-75", "cursor-not-allowed");
				button.className = "w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors font-medium shadow-md cursor-pointer";
				button.innerHTML = "Try to Sign Up Again";
				button.disabled = false;


				// If the error is a duplicate phone number, highlight the phone number input to draw user's attention
				const errorText = button.textContent;
				if (errorText.includes('phone number already exists')) {
					highlightPhoneInput();
					
					const phoneInput = document.getElementById('phone_number');
					if (phoneInput) {
						setTimeout(() => {
							phoneInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
							phoneInput.focus();
						}, 100); // Small delay to ensure the UI has updated
					}
				}
			}, 3000);
		}
	});
</script> 
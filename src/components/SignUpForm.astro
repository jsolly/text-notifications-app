---
import ContactInformation from "./contact-info/UserContactInfo.astro";
import UserPreferences from "./user-preferences/UserPreferences.astro";
import InstantAlerts from "./notifications/instant/InstantAlerts.astro";
import DailyNotifications from "./notifications/daily/DailyNotifications.astro";
import Toast from "./Toast.astro";

const SIGNUP_API_URL = import.meta.env.PUBLIC_SIGNUP_API_URL;
const TURNSTILE_SITE_KEY = import.meta.env.PUBLIC_TURNSTILE_SITE_KEY;
const isDev = import.meta.env.DEV;
---

<div class="bg-white rounded-xl shadow-lg p-8 max-w-md w-full">
  <h1 class="text-3xl font-bold text-slate-800 mb-3">Text Notifications App</h1>
  <p class="text-slate-600 mb-8">Choose events you'd like to receive text notifications about.</p>
  
  <form 
    id="signup-form"
    class="space-y-8"
    novalidate
  >
    <div class="space-y-8">
      <ContactInformation />
      <UserPreferences />

      <section>
        <h2 class="text-lg font-semibold text-slate-800 mb-6">Notifications</h2>
        <InstantAlerts />
        <DailyNotifications />
      </section>
    </div>

    <div class="space-y-4">
      {!isDev && (
        <div 
          class="cf-turnstile" 
          data-sitekey={TURNSTILE_SITE_KEY}
          data-callback="onTurnstileCallback"
          data-theme="light"
        ></div>
      )}

      <button type="submit" 
        id="submit-button"
        class="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors font-medium">
        Sign Up for Notifications
      </button>

      <p class="text-xs text-slate-500 text-center">
        By signing up, you agree to receive text messages about your selected events. 
        Message and data rates may apply.
      </p>
    </div>
  </form>
</div>

<!-- Toast notification component -->
<Toast id="notification-toast" />

<!-- Add HTMX to the page -->
<script src="https://unpkg.com/htmx.org@1.9.10"></script>

<!-- Add Turnstile only in production -->
{!isDev && <script is:inline src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>}

<!-- Add form validation and submission handling -->
<script is:inline define:vars={{ isDev, SIGNUP_API_URL }}>
  let isPhoneValid = false;
  let isCityValid = false;
  let isTurnstileValid = isDev; // Set to true in dev mode
  const form = document.getElementById('signup-form');
  const submitButton = document.getElementById('submit-button');
  let turnstileWidgetId = null; // Store the widget ID for reset

  if (!form || !submitButton) {
    console.error('Required form elements not found');
    throw new Error('Required form elements not found');
  }

  // Set up HTMX attributes programmatically
  form.setAttribute('hx-post', SIGNUP_API_URL);
  form.setAttribute('hx-swap', 'none');
  form.setAttribute('hx-on:htmx:after-request', 'handleFormResponse(event)');
  form.setAttribute('hx-headers', isDev ? '{}' : '{"cf-turnstile-response": ""}');

  // Listen for phone validation changes
  document.addEventListener('phone-validation-change', ((event) => {
    isPhoneValid = event.detail.isValid;
    console.log('Phone validation changed:', isPhoneValid);
    updateSubmitButton();
  }));

  // Listen for city validation changes
  document.addEventListener('city-validation-change', ((event) => {
    isCityValid = event.detail.isValid;
    console.log('City validation changed:', isCityValid);
    updateSubmitButton();
  }));

  // Turnstile callback
  const onTurnstileCallback = (token, widgetId) => {
    isTurnstileValid = true;
    turnstileWidgetId = widgetId; // Store the widget ID for reset
    
    // Update the hx-headers attribute with the token
    form.setAttribute('hx-headers', JSON.stringify({
      'cf-turnstile-response': token
    }));
    updateSubmitButton();
    console.log('Turnstile validation successful');
  };
  window.onTurnstileCallback = onTurnstileCallback;

  function isFormValid() {
    return isPhoneValid && isCityValid && (isDev || isTurnstileValid);
  }

  function updateSubmitButton() {
    if (!submitButton) return;

    if (!isFormValid()) {
      submitButton.classList.remove('hover:bg-blue-700');
    } else {
      submitButton.classList.add('hover:bg-blue-700');
    }
  }

  function showValidationMessage() {
    const validationState = {
      phone: { isValid: isPhoneValid, label: 'valid phone number' },
      city: { isValid: isCityValid, label: 'city' },
      turnstile: { isValid: isDev || isTurnstileValid, label: 'Turnstile verification' }
    };
    
    const missingFields = Object.values(validationState)
      .filter(field => !field.isValid)
      .map(field => field.label);
    
    if (missingFields.length === 0) return;
    
    const message = `Please provide a ${missingFields.join(' and ')} before submitting.`;
    console.log('Showing validation message:', message);
    
    showToast(message, 'error');
  }
  
  // Helper function to show toast messages
  function showToast(message, type) {
    // Try using the global toast function first if available
    if (window.toastFunctions && typeof window.toastFunctions.showToast === 'function') {
      window.toastFunctions.showToast(message, type);
    } else {
      // Fall back to dispatching an event
      const toastEvent = new CustomEvent('toast-show', {
        detail: { message, type }
      });
      window.dispatchEvent(toastEvent);
    }
  }

  // Helper function to check a specific validation condition
  function validateField(condition, fieldName, element) {
    if (element && !condition) {
      console.log(`${fieldName} validation failed`);
      return false;
    }
    return true;
  }

  // Helper function to focus and blur an element to trigger validation
  function triggerValidation(element) {
    if (element) {
      element.focus();
      element.blur();
    }
  }

  // Handle form submission with HTMX
  window.handleFormResponse = function(event) {
    const xhr = event.detail.xhr;
    const status = xhr.status;
    const responseText = xhr.responseText;
    
    // Parse the HTML response
    const parser = new DOMParser();
    const doc = parser.parseFromString(responseText, 'text/html');
    const messageElement = doc.querySelector('div');
    
    if (!messageElement) {
      console.error('Could not parse response message');
      return;
    }
    
    // Extract message text
    let message = '';
    const titleElement = messageElement.querySelector('h3');
    const descElement = messageElement.querySelector('p');
    
    if (titleElement && descElement) {
      message = `${titleElement.textContent}: ${descElement.textContent}`;
    } else {
      message = messageElement.textContent.trim();
    }
    
    // Determine message type based on status code
    const type = status >= 200 && status < 300 ? 'success' : 'error';
    
    // Show toast notification
    showToast(message, type);
    
    // If successful, redirect to the same page after a short delay
    if (type === 'success') {
      console.log('Form submission successful, redirecting page in 2 seconds...');
      setTimeout(() => {
        window.location.href = window.location.pathname;
      }, 2000); // 2 second delay to allow the toast to be seen
    }
  };

  // Prevent form submission if validation fails
  form.addEventListener('htmx:beforeRequest', (event) => {
    console.log('Form submitted, validation state:', { isPhoneValid, isCityValid, isTurnstileValid });
    
    // Get form elements
    const phoneInput = document.getElementById('phone-number');
    const cityInput = document.querySelector('input[name="city"]');
    
    // Perform validation checks
    const phoneValid = validateField(isPhoneValid, 'Phone', phoneInput);
    const cityValid = validateField(isCityValid, 'City', cityInput);
    const turnstileValid = validateField(isDev || isTurnstileValid, 'Turnstile', document.querySelector('.cf-turnstile'));
    
    // If any validation fails, prevent form submission
    if (!phoneValid || !cityValid || !turnstileValid) {
      event.preventDefault();
      showValidationMessage();
      return;
    }
    
    // Try to trigger validation for fields that failed
    if (phoneInput && !isPhoneValid) {
      triggerValidation(phoneInput);
    }
    
    if (cityInput && !isCityValid) {
      triggerValidation(cityInput);
    }
    
    // Final check after triggering validation events
    if (!isFormValid()) {
      console.log('Form validation failed after triggering validation');
      event.preventDefault();
      showValidationMessage();
      return;
    }
    
    // Show loading state
    submitButton.disabled = true;
    submitButton.textContent = 'Submitting...';
  });
  
  // Reset button state after request completes
  form.addEventListener('htmx:afterRequest', () => {
    submitButton.disabled = false;
    submitButton.textContent = 'Sign Up for Notifications';
  });

  // Initial button state
  updateSubmitButton();
</script>
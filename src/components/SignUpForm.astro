---
import ContactInformation from "./contact-info/UserContactInfo.astro";
import UserPreferences from "./user-preferences/UserPreferences.astro";
import InstantAlerts from "./notifications/instant/InstantAlerts.astro";
import DailyNotifications from "./notifications/daily/DailyNotifications.astro";
import Toast from "./Toast.astro";

const SIGNUP_API_URL = import.meta.env.PUBLIC_SIGNUP_API_URL;
const TURNSTILE_SITE_KEY = import.meta.env.PUBLIC_TURNSTILE_SITE_KEY;
const isDev = import.meta.env.DEV;

// Define the Turnstile callback on the window object
declare global {
	interface Window {
		onTurnstileCallback: (token: string) => void;
	}
}
---

<div class="bg-white rounded-xl shadow-lg p-8 max-w-md w-full">
  <h1 class="text-3xl font-bold text-slate-800 mb-3">Text Notifications App</h1>
  <p class="text-slate-600 mb-8">Choose events you'd like to receive text notifications about.</p>
  
  <form 
    id="signup-form"
    class="space-y-8"
    hx-post={SIGNUP_API_URL}
    hx-target="#notification-toast"
    hx-swap="innerHTML"
    novalidate
  >
    <div class="space-y-8">
      <ContactInformation />
      <UserPreferences />

      <section>
        <h2 class="text-lg font-semibold text-slate-800 mb-6">Notifications</h2>
        <InstantAlerts />
        <DailyNotifications />
      </section>
    </div>

    <div class="space-y-4">
      {!isDev && (
        <div 
          class="cf-turnstile" 
          data-sitekey={TURNSTILE_SITE_KEY}
          data-callback="onTurnstileCallback"
          data-theme="light"
        ></div>
      )}

      <button type="submit" 
        id="submit-button"
        class="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors font-medium">
        Sign Up for Notifications
      </button>

      <p class="text-xs text-slate-500 text-center">
        By signing up, you agree to receive text messages about your selected events. 
        Message and data rates may apply.
      </p>
    </div>
  </form>
</div>

<!-- Toast notification component -->
<Toast id="notification-toast" />

<!-- Add HTMX to the page -->
<script src="https://unpkg.com/htmx.org@1.9.10"></script>

<!-- Add Turnstile only in production -->
{!isDev && <script is:inline src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>}

<!-- Form validation and submission handling -->
<script>
  import { setupFormValidation } from './utils/formValidationUtils.ts';
  
  // Initialize form validation state
  let isPhoneValid = false, isCityValid = false;
  
  // Setup form validation with our utility
  const validationUtils = setupFormValidation({
    setPhoneValid: (isValid: boolean) => isPhoneValid = isValid,
    setCityValid: (isValid: boolean) => isCityValid = isValid
  });
  
  // Expose Turnstile callback to window
  if (!import.meta.env.DEV) {
    window.onTurnstileCallback = (token: string): void => {
      const form = document.getElementById("signup-form");
      if (form) {
        form.setAttribute(
          "hx-headers",
          JSON.stringify({
            "cf-turnstile-response": token,
          }),
        );
      }
    };
  }
  
  const form = document.getElementById('signup-form');
  
  // Add event listener for form validation before submission
  form.addEventListener('htmx:beforeRequest', function(event) {
    
    // Use our utility to get validation status
    const validationStatus = validationUtils.getValidationStatus(isPhoneValid, isCityValid);
    
    // If validation fails, prevent form submission and show message
    if (!validationStatus.isValid) {
      event.preventDefault();
      
      // Dispatch an event for the toast utility to handle
      const validationEvent = new CustomEvent("validation-check", {
        detail: validationStatus.validationState
      });
      window.dispatchEvent(validationEvent);
      
      return;
    }
  });
  
  // Listen for the form submission response and reset the page
  document.addEventListener('htmx:afterSettle', function(event) {
    // Reload the page after a short delay to allow the toast to be seen
    setTimeout(() => {
      window.location.reload();
    }, 2000);
  });
</script>

<!-- Toast utilities -->
<script>
  import { createValidationToast } from './utils/toastUtils.ts';
  
  // Listen for validation form events and use the utility
  window.addEventListener('validation-check', ((event: CustomEvent) => {
    const validationState = event.detail;
    const toastEvent = createValidationToast(validationState);
    if (toastEvent) {
      window.dispatchEvent(toastEvent);
    }
  }) as EventListener);
</script>
---
import ContactInformation from "./contact-info/UserContactInfo.astro";
import UserPreferences from "./user-preferences/UserPreferences.astro";
import InstantAlerts from "./notifications/instant/InstantAlerts.astro";
import DailyNotifications from "./notifications/daily/DailyNotifications.astro";

const SIGNUP_API_URL = import.meta.env.PUBLIC_SIGNUP_API_URL;
const TURNSTILE_SITE_KEY = import.meta.env.PUBLIC_TURNSTILE_SITE_KEY;
const isDev = import.meta.env.DEV;

// Define the Turnstile callback on the window object
declare global {
	interface Window {
		onTurnstileCallback: (token: string) => void;
	}
}
---

<div>
  <div class="flex items-center mb-6">
    <div class="bg-indigo-100 p-2 rounded-full mr-3">
      <img src="/images/notification-icon.svg" alt="" class="w-5 h-5 text-indigo-600" />
    </div>
    <h2 class="text-2xl font-bold text-indigo-900">Sign Up</h2>
  </div>
  <p class="text-slate-600 mb-6">Choose events you'd like to receive text notifications about.</p>
  
  <form 
    id="signup-form"
    class="space-y-6"
    hx-post={SIGNUP_API_URL}
    hx-target="#submit-button"
    hx-target-409="#submit-button"
    hx-swap="outerHTML"
    hx-ext="response-targets"
    novalidate
    data-is-dev={isDev.toString()}
  >
    <div class="space-y-6">
      <ContactInformation />
      <UserPreferences />

      <section>
        <h2 class="text-lg font-semibold text-indigo-900 mb-4 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
          </svg>
          Notifications
        </h2>
        <InstantAlerts />
        <DailyNotifications />
      </section>
    </div>

    <div class="space-y-4">
      {!isDev && (
        <div 
          class="cf-turnstile" 
          data-sitekey={TURNSTILE_SITE_KEY}
          data-callback="onTurnstileCallback"
          data-theme="light"
        ></div>
      )}

      <button type="submit" 
        id="submit-button"
        class="w-full bg-indigo-600 text-white py-3 px-4 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-colors font-medium shadow-md">
        Sign Up for Notifications
      </button>

      <p class="text-xs text-slate-500 text-center">
        By signing up, you agree to receive text messages about your selected events. 
        Message and data rates may apply.
      </p>
    </div>
  </form>
</div>

<!-- Add HTMX and extensions -->
<script src="https://unpkg.com/htmx.org@2.0.4" integrity="sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+" crossorigin="anonymous"></script>
<script src="https://unpkg.com/htmx-ext-response-targets@2.0.3/response-targets.js" crossorigin="anonymous"></script>

<!-- Add Turnstile only in production -->
{!isDev && <script is:inline src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>}


<script>
  // Configure HTMX based on environment
  // In HTMX 2.0, selfRequestsOnly defaults to true (blocks cross-origin requests)
  document.addEventListener('DOMContentLoaded', function() {
    // Read the isDev value from the data attribute
    const form = document.getElementById('signup-form');
    const isDev = form.dataset.isDev === 'true';
    
    // @ts-ignore
    if (isDev) {
      // In development: Allow cross-origin requests for local API testing
      // @ts-ignore
      window.htmx.config.selfRequestsOnly = false;
      console.log("HTMX configured for development: cross-origin requests allowed");
    }
  });

  // import 'htmx.org'
  // import 'htmx-ext-response-targets/dist/response-targets';
  
  import { setupFormValidation } from './utils/formValidationUtils.ts';
  import { createTextBubbleAnimation } from './utils/animationUtils.ts';
  import { setupSignupFormAnimation } from './utils/hoverAnimations.ts';
  
  // Initialize form validation state
  let isPhoneValid = false, isCityValid = false;
  
  // Setup form validation with our utility
  const validationUtils = setupFormValidation({
    setPhoneValid: (isValid: boolean) => isPhoneValid = isValid,
    setCityValid: (isValid: boolean) => isCityValid = isValid
  });
  
  // Get isDev value from the form's data attribute
  const form = document.getElementById('signup-form');
  const isDev = form.dataset.isDev === 'true';
  
  // Define HTMX event interface for better type checking
  interface HtmxEvent extends Event {
    detail: {
      xhr?: XMLHttpRequest;
      elt?: HTMLElement;
      target?: HTMLElement;
      [key: string]: any;
    }
  }
  
  // Expose Turnstile callback to window
  if (!isDev) {
    window.onTurnstileCallback = (token: string): void => {
      const form = document.getElementById("signup-form");
      if (form) {
        form.setAttribute(
          "hx-headers",
          JSON.stringify({
            "cf-turnstile-response": token,
          }),
        );
      }
    };
  }
  
  /* 
  * PRE-SUBMISSION VALIDATION
  * This code executes before the form is submitted to validate inputs
  * and update the UI accordingly
  */
  form.addEventListener('htmx:before-request', function(event) {
    
    // Use our utility to get validation status
    const validationStatus = validationUtils.getValidationStatus(isPhoneValid, isCityValid);
    
    // If validation fails, prevent form submission and highlight invalid fields
    if (!validationStatus.isValid) {
      event.preventDefault();
      
      // Highlight invalid fields with red borders
      validationUtils.highlightInvalidFields(isPhoneValid, isCityValid);
      
      // Scroll to the first invalid field
      const invalidField = !isPhoneValid ? 
        document.getElementById('phone-number') : 
        document.getElementById('city-search');
        
      if (invalidField) {
        invalidField.scrollIntoView({ behavior: 'smooth', block: 'center' });
        invalidField.focus();
      }
      
      return;
    }
    
    // Update button text to "Submitting..." when the form is being submitted
    const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
    if (submitButton) {
      submitButton.innerHTML = 'Submitting...';
      submitButton.disabled = true;
      submitButton.classList.add('opacity-75', 'cursor-not-allowed');
    }
  });
  
  /* 
   * POST-SUBMISSION RESPONSE HANDLING
   * This code executes after the backend has responded to the form submission
   * and handles success/error states
   */
  
  // Handle the response after it's been swapped into the DOM
  document.addEventListener('htmx:after-settle', function(event) {
    // Use type assertion for the event
    const htmxEvent = event as HtmxEvent;
    const button = document.getElementById('submit-button') as HTMLButtonElement;
    
    if (button) {
      // Check if the button has success or error data attributes
      const isSuccess = button.hasAttribute('data-success');
      const isError = button.hasAttribute('data-error');
      
      // Also check for 409 conflict responses which may not set data-error
      const is409Error = htmxEvent.detail && htmxEvent.detail.xhr && htmxEvent.detail.xhr.status === 409;
      
      if (isSuccess) {
        // Animation configuration for success feedback
        const animationConfig = {
          duration: 6000, // Animation duration in milliseconds
          // Optional: You can customize any of these parameters as needed
          // count: 40, // Reduce bubble count for performance
          // colors: ['#4F46E5', '#6366F1'], // Limited color palette
          // messages: ['Success!', 'Thank you!'] // Custom messages
        };
        
        // Play the text bubble animation on success with custom configuration
        const animationDuration = createTextBubbleAnimation(animationConfig);
        
        // On success: wait for animation to complete then reload the page
        setTimeout(() => {
          window.location.reload();
        }, animationDuration);
      } else if (isError || is409Error) {
        // Reset any existing animations
        const existingContainer = document.getElementById('text-bubble-animation');
        if (existingContainer) {
          existingContainer.remove();
        }
        
        // Remove any emoji animations from the hover effect
        const emojis = document.querySelectorAll('.peek-emoji');
        emojis.forEach(emoji => emoji.remove());
        
        // On error: wait 5 seconds then reset the button
        setTimeout(() => {
          button.className = "w-full bg-indigo-600 text-white py-3 px-4 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-colors font-medium shadow-md";
          button.innerHTML = "Sign Up for Notifications";
          button.disabled = false;
          button.removeAttribute('data-error');
          
          // Re-initialize the hover animation
          setupSignupFormAnimation();
        }, 5000);
      }
    }
  });

  // Initialize the hover animation for the submit button
  setupSignupFormAnimation();
</script>
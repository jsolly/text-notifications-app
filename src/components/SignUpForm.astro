---
import ContactInformation from "./contact-info/UserContactInfo.astro";
import UserPreferences from "./user-preferences/UserPreferences.astro";
import InstantAlerts from "./notifications/instant/InstantAlerts.astro";
import DailyNotifications from "./notifications/daily/DailyNotifications.astro";
import Toast from "./Toast.astro";

const SIGNUP_API_URL = import.meta.env.PUBLIC_SIGNUP_API_URL;
const TURNSTILE_SITE_KEY = import.meta.env.PUBLIC_TURNSTILE_SITE_KEY;
const isDev = import.meta.env.DEV;
---

<div class="bg-white rounded-xl shadow-lg p-8 max-w-md w-full">
  <h1 class="text-3xl font-bold text-slate-800 mb-3">Text Notifications App</h1>
  <p class="text-slate-600 mb-8">Choose events you'd like to receive text notifications about.</p>
  
  <form 
    id="signup-form"
    class="space-y-8"
    hx-post={SIGNUP_API_URL}
    hx-target="#notification-toast"
    hx-swap="innerHTML"
    novalidate
  >
    <div class="space-y-8">
      <ContactInformation />
      <UserPreferences />

      <section>
        <h2 class="text-lg font-semibold text-slate-800 mb-6">Notifications</h2>
        <InstantAlerts />
        <DailyNotifications />
      </section>
    </div>

    <div class="space-y-4">
      {!isDev && (
        <div 
          class="cf-turnstile" 
          data-sitekey={TURNSTILE_SITE_KEY}
          data-callback="onTurnstileCallback"
          data-theme="light"
        ></div>
      )}

      <button type="submit" 
        id="submit-button"
        class="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors font-medium">
        Sign Up for Notifications
      </button>

      <p class="text-xs text-slate-500 text-center">
        By signing up, you agree to receive text messages about your selected events. 
        Message and data rates may apply.
      </p>
    </div>
  </form>
</div>

<!-- Toast notification component -->
<Toast id="notification-toast" />

<!-- Add HTMX to the page -->
<script src="https://unpkg.com/htmx.org@1.9.10"></script>

<!-- Add Turnstile only in production -->
{!isDev && <script is:inline src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>}

<!-- Form validation and submission handling -->
<script is:inline define:vars={{ isDev }}>
  let isPhoneValid = false;
  let isCityValid = false;
  let isTurnstileValid = isDev; // Set to true in dev mode
  const form = document.getElementById('signup-form');
  
  if (form) {
    // Add event listener for form validation before submission
    form.addEventListener('htmx:beforeRequest', function(event) {
      console.log('Form submitted, validation state:', { isPhoneValid, isCityValid, isTurnstileValid });
      
      // Get form elements
      const phoneInput = document.getElementById('phone-number');
      const cityInput = document.querySelector('input[name="city"]');
      
      // Perform validation checks
      const phoneValid = validateField(isPhoneValid, 'Phone', phoneInput);
      const cityValid = validateField(isCityValid, 'City', cityInput);
      const turnstileValid = validateField(isDev || isTurnstileValid, 'Turnstile', document.querySelector('.cf-turnstile'));
      
      // If any validation fails, prevent form submission
      if (!phoneValid || !cityValid || !turnstileValid) {
        event.preventDefault();
        showValidationMessage();
        return;
      }
    });
  }
  
  // Only need to handle Turnstile token in production
  if (!isDev) {
    // Turnstile callback to add the token to the request headers
    window.onTurnstileCallback = function(token) {
      isTurnstileValid = true;
      if (form) {
        form.setAttribute('hx-headers', JSON.stringify({
          'cf-turnstile-response': token
        }));
      }
      updateSubmitButton();
    };
  }
  
  // Listen for the reload event triggered by the server
  document.addEventListener('htmx:afterSettle', function(event) {
    // Check if the reload event was triggered
    if (event.detail.xhr && event.detail.xhr.getResponseHeader('HX-Trigger')) {
      try {
        const triggers = JSON.parse(event.detail.xhr.getResponseHeader('HX-Trigger'));
        if (triggers && triggers.reload) {
          // Reload the page after a short delay to allow the toast to be seen
          setTimeout(() => {
            window.location.reload();
          }, 2000);
        }
      } catch (e) {
        console.error('Error parsing HX-Trigger header:', e);
      }
    }
  });
  
  // Listen for phone validation changes
  document.addEventListener('phone-validation-change', ((event) => {
    isPhoneValid = event.detail.isValid;
    console.log('Phone validation changed:', isPhoneValid);
    updateSubmitButton();
  }));

  // Listen for city validation changes
  document.addEventListener('city-validation-change', ((event) => {
    isCityValid = event.detail.isValid;
    console.log('City validation changed:', isCityValid);
    updateSubmitButton();
  }));
  
  function isFormValid() {
    return isPhoneValid && isCityValid && (isDev || isTurnstileValid);
  }

  function updateSubmitButton() {
    const submitButton = document.getElementById('submit-button');
    if (!submitButton) return;

    if (!isFormValid()) {
      submitButton.classList.remove('hover:bg-blue-700');
    } else {
      submitButton.classList.add('hover:bg-blue-700');
    }
  }

  function showValidationMessage() {
    const validationState = {
      phone: { isValid: isPhoneValid, label: 'valid phone number' },
      city: { isValid: isCityValid, label: 'city' },
      turnstile: { isValid: isDev || isTurnstileValid, label: 'Turnstile verification' }
    };
    
    const missingFields = Object.values(validationState)
      .filter(field => !field.isValid)
      .map(field => field.label);
    
    if (missingFields.length === 0) return;
    
    const message = `Please provide a ${missingFields.join(' and ')} before submitting.`;
    console.log('Showing validation message:', message);
    
    // Show validation message in toast
    const toastEvent = new CustomEvent('toast-show', {
      detail: { message, type: 'error' }
    });
    window.dispatchEvent(toastEvent);
  }
  
  // Helper function to check a specific validation condition
  function validateField(condition, fieldName, element) {
    if (element && !condition) {
      console.log(`${fieldName} validation failed`);
      return false;
    }
    return true;
  }
</script>
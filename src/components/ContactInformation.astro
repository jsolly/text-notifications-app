---
type StateCode = "PA" | "CA";

interface Props {
	title?: string;
}

const { title = "Contact Information" } = Astro.props;

const countries = [
	{ value: "US", label: "United States", selected: true },
	{ value: "CA", label: "Canada" },
	{ value: "GB", label: "United Kingdom" },
	{ value: "AU", label: "Australia" },
	{ value: "NZ", label: "New Zealand" },
];

const states = [
	{ value: "PA", label: "Pennsylvania", selected: true },
	{ value: "CA", label: "California" },
];

const citiesByState: Record<StateCode, { value: string; label: string }[]> = {
	PA: [
		{ value: "drexel-hill", label: "Drexel Hill" },
		{ value: "philadelphia", label: "Philadelphia" },
	],
	CA: [
		{ value: "redlands", label: "Redlands" },
		{ value: "san-francisco", label: "San Francisco" },
	],
};
---

<section>
  <h2 class="text-lg font-semibold text-slate-800 mb-4">{title}</h2>
  <div class="space-y-4">
    <div>
      <label for="phone" class="block text-sm font-medium text-slate-700 mb-1">Phone Number</label>
      <input 
        type="tel" 
        id="phone" 
        name="phone"
        class="w-full px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        placeholder="(555) 555-5555"
        pattern="[\(]\d{3}[\)]\s\d{3}[\-]\d{4}"
        required
      >
    </div>

    <div>
      <label for="country" class="block text-sm font-medium text-slate-700 mb-1">Country</label>
      <select
        id="country"
        name="country"
        class="w-full px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        required
      >
        {countries.map(country => (
          <option value={country.value} selected={country.selected}>
            {country.label}
          </option>
        ))}
      </select>
    </div>

    <div>
      <label for="state" class="block text-sm font-medium text-slate-700 mb-1">State</label>
      <select
        id="state"
        name="state"
        class="w-full px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        required
      >
        {states.map(state => (
          <option value={state.value} selected={state.selected}>
            {state.label}
          </option>
        ))}
      </select>
    </div>

    <div>
      <label for="city" class="block text-sm font-medium text-slate-700 mb-1">City</label>
      <select 
        id="city" 
        name="city"
        class="w-full px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        required
      >
        {citiesByState[states.find(state => state.selected)!.value as StateCode].map(city => (
          <option value={city.value}>{city.label}</option>
        ))}
      </select>
    </div>
  </div>
</section>

<script define:vars={{ citiesByState }}>
  const stateSelect = document.getElementById('state');
  const citySelect = document.getElementById('city');

  function updateCities(stateCode) {
    citySelect.innerHTML = '';
    
    const cities = citiesByState[stateCode] || [];
    
    cities.forEach(city => {
      const option = document.createElement('option');
      option.value = city.value;
      option.textContent = city.label;
      citySelect.appendChild(option);
    });

    if (cities.length > 0) {
      citySelect.value = cities[0].value;
    }
  }

  stateSelect.addEventListener('change', (e) => {
    const selectedState = e.target.value;
    updateCities(selectedState);
  });

  updateCities(stateSelect.value);
</script> 
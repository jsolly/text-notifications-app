---
type StateCode = "PA" | "CA";

interface SelectField {
	id: string;
	label: string;
	options: { value: string; label: string; selected?: boolean }[];
}

const citiesByState: Record<StateCode, { value: string; label: string }[]> = {
	PA: [
		{ value: "drexel-hill", label: "Drexel Hill" },
		{ value: "philadelphia", label: "Philadelphia" },
	],
	CA: [
		{ value: "redlands", label: "Redlands" },
		{ value: "san-francisco", label: "San Francisco" },
	],
};

const stateOptions: { value: StateCode; label: string; selected?: boolean }[] =
	[
		{ value: "PA", label: "Pennsylvania", selected: true },
		{ value: "CA", label: "California" },
	];

const selectFields: SelectField[] = [
	{
		id: "country",
		label: "Country",
		options: [
			{ value: "US", label: "United States", selected: true },
			{ value: "CA", label: "Canada" },
			{ value: "GB", label: "United Kingdom" },
			{ value: "AU", label: "Australia" },
			{ value: "NZ", label: "New Zealand" },
		],
	},
	{
		id: "state",
		label: "State",
		options: stateOptions,
	},
	{
		id: "city",
		label: "City",
		options: citiesByState[stateOptions[0].value],
	},
];
---

<section>
  <h2 class="text-lg font-semibold text-slate-800 mb-4">Contact Information</h2>
  <div class="space-y-4">
    <div>
      <label for="phone" class="block text-sm font-medium text-slate-700 mb-1">Phone Number</label>
      <input 
        type="tel" 
        id="phone" 
        name="phone"
        class="w-full px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        placeholder="(555) 555-5555"
        pattern="[\(]\d{3}[\)]\s\d{3}[\-]\d{4}"
        required
      >
    </div>

    {selectFields.map(field => (
      <div>
        <label for={field.id} class="block text-sm font-medium text-slate-700 mb-1">{field.label}</label>
        <select
          id={field.id}
          name={field.id}
          class="w-full px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          required
        >
          {field.options.map(option => (
            <option value={option.value} selected={option.selected}>
              {option.label}
            </option>
          ))}
        </select>
      </div>
    ))}
  </div>
</section>

<script define:vars={{ citiesByState, validStates: ["PA", "CA"] }}>
  const stateSelect = document.getElementById('state');
  const citySelect = document.getElementById('city');

  function updateCities(stateCode) {
    if (!validStates.includes(stateCode)) return;
    citySelect.innerHTML = '';
    const cities = citiesByState[stateCode] || [];
    
    cities.forEach(city => {
      const option = document.createElement('option');
      option.value = city.value;
      option.textContent = city.label;
      citySelect.appendChild(option);
    });

    if (cities.length > 0) {
      citySelect.value = cities[0].value;
    }
  }

  stateSelect.addEventListener('change', (e) => {
    updateCities(e.target.value);
  });

  updateCities(stateSelect.value);
</script> 
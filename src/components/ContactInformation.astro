---
import { neon } from "@neondatabase/serverless";
const sql = neon(import.meta.env.DATABASE_URL);

// Fetch all city records at build time
const cities = await sql`
	SELECT 
		c.city_id,
		c.city_name,
		c.state_code,
		c.state_name,
		c.country_code,
		c.country_name
	FROM Cities c
	ORDER BY c.city_name
`;

// Create a searchable format for Fuse.js
const cityOptions = cities.map((city) => ({
	value: city.city_id,
	label: [city.city_name, city.state_name || city.state_code, city.country_name]
		.filter(Boolean)
		.join(", "),
}));
---

<!-- Load external scripts via CDN -->
<script is:inline src="https://unpkg.com/libphonenumber-js@1.11.19/bundle/libphonenumber-js.min.js"></script>
<script is:inline src="https://cdn.jsdelivr.net/npm/fuse.js/dist/fuse.js"></script>

<!-- Pass cityOptions to Alpine -->
<script define:vars={{ cityOptions }}>
document.addEventListener('alpine:init', () => {
	// Alpine component for city search
	Alpine.data('contactInfo', () => ({
		searchQuery: '',
		selectedCity: null,
		showDropdown: false,
		fuse: new Fuse(cityOptions, {
			keys: ['label'],
			threshold: 0.3,
			distance: 100
		}),
		get filteredCities() {
			return this.searchQuery.length < 2 ? [] : this.fuse.search(this.searchQuery).slice(0, 10);
		},
		selectCity(result) {
			this.selectedCity = result.item.value;
			this.searchQuery = result.item.label;
			this.showDropdown = false;
		},
		handleInput() {
			const current = cityOptions.find(c => c.value === this.selectedCity);
			if (!current || this.searchQuery !== current.label) {
				this.selectedCity = null;
				this.showDropdown = true;
			}
		}
	}));

	// Alpine component for phone input and formatting
	Alpine.data('phoneInput', () => ({
		phoneNumber: '',
		country: 'US',
		formatter: null,
		init() {
			this.formatter = new window.libphonenumber.AsYouType(this.country);
			this.$watch('country', (value) => {
				let internationalNumber = '';
				if (this.phoneNumber && this.isValid()) {
					internationalNumber = window.libphonenumber.parsePhoneNumber(this.phoneNumber, this.country).number;
				}
				this.formatter = new window.libphonenumber.AsYouType(value);
				if (internationalNumber) {
					try {
						const newNumber = window.libphonenumber.parsePhoneNumber(internationalNumber);
						this.phoneNumber = this.formatter.input(newNumber.nationalNumber);
					} catch {
						this.phoneNumber = '';
					}
				} else {
					this.phoneNumber = '';
				}
			});
		},
		handleInput(e) {
			const input = e.target;
			const oldValue = this.phoneNumber;
			const selectionStart = input.selectionStart;
			const oldDigitsBeforeCursor = oldValue.slice(0, selectionStart).replace(/\D/g, '').length;
			if (e.inputType === 'deleteContentBackward' && this.phoneNumber.length <= 4) {
				this.phoneNumber = '';
				return;
			}
			this.formatter.reset();
			const onlyDigits = e.target.value.replace(/\D/g, '');
			const example = window.libphonenumber.getExampleNumber(this.country);
			const maxLength = example ? example.nationalNumber.length : 15;
			if (onlyDigits.length > maxLength) return;
			this.phoneNumber = this.formatter.input(onlyDigits);
			if (e.inputType !== 'deleteContentBackward') {
				requestAnimationFrame(() => {
					let digitsCount = 0, newPosition = 0;
					for (let i = 0; i < this.phoneNumber.length; i++) {
						if (/\d/.test(this.phoneNumber[i])) digitsCount++;
						if (digitsCount > oldDigitsBeforeCursor) break;
						newPosition = i + 1;
					}
					input.setSelectionRange(newPosition, newPosition);
				});
			}
		},
		isValid() {
			return this.phoneNumber && window.libphonenumber.isValidPhoneNumber(this.phoneNumber, this.country);
		},
		getRawNumber() {
			if (!this.phoneNumber || !this.isValid()) return '';
			try {
				const parsed = window.libphonenumber.parsePhoneNumber(this.phoneNumber, this.country);
				return parsed.number;
			} catch {
				return '';
			}
		},
		getFormattedNumber() {
			if (!this.phoneNumber || !this.isValid()) return this.phoneNumber;
			try {
				const parsed = window.libphonenumber.parsePhoneNumber(this.phoneNumber, this.country);
				return parsed.formatNational();
			} catch {
				return this.phoneNumber;
			}
		},
		getExampleNumber() {
			try {
				const example = window.libphonenumber.getExampleNumber(this.country);
				return example ? example.formatNational() : '(555) 123-4567';
			} catch {
				return '(555) 123-4567';
			}
		},
		getPlaceholder() {
			return this.getExampleNumber();
		}
	}));
});
</script>

<section x-data="contactInfo">
	<h2 class="text-lg font-semibold text-slate-800 mb-4">Contact Information</h2>
	<div class="space-y-4">
		<!-- Phone number input -->
		<div>
			<label for="phone-number" class="block text-sm font-medium text-slate-700 mb-1">Phone number</label>
			<div class="flex" x-data="phoneInput">
				<div class="group relative flex w-full focus-within:z-10" x-id="['phone-group']">
					<div class="relative w-24">
						<select id="country" name="country" x-model="country" autocomplete="country" aria-label="Country"
							x-bind:aria-controls="$id('phone-group')"
							class="w-full appearance-none border border-slate-300 rounded-l-lg py-2 pl-3 pr-8 text-base text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 -mr-px"
							x-bind:class="{
								'border-red-300 focus:ring-red-500 focus:border-red-500': phoneNumber && !isValid(),
								'border-green-500 focus:ring-green-500 focus:border-green-500': phoneNumber && isValid()
							}">
							<option value="US">US</option>
							<option value="CA">CA</option>
							<option value="GB">UK</option>
							<option value="AU">AU</option>
						</select>
						<svg class="pointer-events-none absolute right-2.5 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-500" viewBox="0 0 16 16" fill="currentColor" aria-hidden="true">
							<path fill-rule="evenodd" d="M4.22 6.22a.75.75 0 0 1 1.06 0L8 8.94l2.72-2.72a.75.75 0 1 1 1.06 1.06l-3.25 3.25a.75.75 0 0 1-1.06 0L4.22 7.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd" />
						</svg>
					</div>
					<div class="flex-1">
						<input type="tel" id="phone-number" name="phone-number" x-model="phoneNumber" @input="handleInput($event)"
							class="w-full border border-slate-300 rounded-r-lg py-2 px-3 text-base text-gray-900 placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
							x-bind:class="{
								'border-red-300 focus:ring-red-500 focus:border-red-500': phoneNumber && !isValid(),
								'border-green-500 focus:ring-green-500 focus:border-green-500': phoneNumber && isValid()
							}"
							x-bind:placeholder="getPlaceholder()" x-bind:aria-controls="$id('phone-group')" />
						<div class="absolute inset-y-0 right-3 flex items-center pointer-events-none" x-show="phoneNumber">
							<svg x-show="isValid()" class="h-5 w-5 text-green-500" viewBox="0 0 20 20" fill="currentColor">
								<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z" clip-rule="evenodd"/>
							</svg>
							<svg x-show="!isValid()" class="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
								<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"/>
							</svg>
						</div>
					</div>
				</div>
			</div>
		</div>

		<!-- City search input -->
		<div class="relative">
			<label for="city-search" class="block text-sm font-medium text-slate-700 mb-1">City</label>
			<input type="text" id="city-search" x-model="searchQuery" @input="handleInput" placeholder="Search for a city..."
				class="w-full px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
				@focus="showDropdown = true" />
			<input type="hidden" name="city" x-model="selectedCity" required />
			<div x-show="showDropdown && searchQuery.length >= 2" x-transition class="absolute z-50 w-full mt-1 bg-white shadow-lg rounded-lg border border-slate-200 max-h-60 overflow-auto" @click.away="showDropdown = false">
				<template x-if="filteredCities.length === 0">
					<div class="px-4 py-2 text-sm text-slate-500">
						No cities found
					</div>
				</template>
				<template x-for="result in filteredCities" :key="result.item.value">
					<button type="button" class="w-full px-4 py-2 text-left hover:bg-slate-50 focus:bg-slate-50 focus:outline-none" @click="selectCity(result)" x-text="result.item.label"></button>
				</template>
			</div>
		</div>
	</div>
</section>
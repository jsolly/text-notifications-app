---
interface Props {
	id: string;
	value: string;
	label: string;
	description: string;
	badgeType: "instant" | "scheduled" | "daily";
}

const { id, value, label, description, badgeType } = Astro.props;

// Badge styling based on type
const badgeStyles = {
	instant: {
		text: "âš¡ instant",
		color: "text-red-500",
	},
	scheduled: {
		text: "ðŸ•’ scheduled",
		color: "text-blue-500",
	},
	daily: {
		text: "ðŸ“… daily",
		color: "text-green-500",
	},
};

const badge = badgeStyles[badgeType];
---

<div class="p-2 rounded-lg hover:bg-slate-50 transition-colors cursor-pointer" data-notification-card>
  <div class="flex items-start space-x-3">
    <input 
      type="checkbox" 
      id={id} 
      name="notifications" 
      value={value}
      aria-describedby={`${id}-description`}
      class="h-4 w-4 min-h-[16px] min-w-[16px] mt-1 text-blue-600 rounded border-slate-300 focus:ring-blue-500 cursor-pointer"
      data-checkbox
    >
    <div>
      <label for={id} class="text-slate-700 cursor-pointer text-sm font-medium">
        {label} <span class={`text-xs ${badge.color}`}>{badge.text}</span>
      </label>
      <p id={`${id}-description`} class="text-xs text-slate-500 mt-0.5">
        {description}
      </p>
    </div>
  </div>
</div>

<script>
  // Make the entire card clickable
  document.querySelectorAll('[data-notification-card]').forEach(card => {
    card.addEventListener('click', (event) => {
      const target = event.target as HTMLElement;
      const checkbox = card.querySelector('[data-checkbox]') as HTMLInputElement;
      
      // Check if the click is directly on the checkbox (to avoid double toggling)
      if (target.tagName === 'INPUT') {
        return;
      }
      
      // Check if the click is on or within a label (including badge text)
      if (target.tagName === 'LABEL' || target.closest('label')) {
        // For label clicks, let the native behavior handle it
        return;
      }
      
      // For all other clicks on the card, toggle the checkbox
      checkbox.checked = !checkbox.checked;
    });
  });
</script> 
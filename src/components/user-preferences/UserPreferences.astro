---
import { PREFERENCES_SCHEMA } from "../../../shared/types/form.schema";
---

<section class="user-preferences">
    <h2 class="text-lg font-semibold text-indigo-900 mb-4">Preferences</h2>
    <div class="flex flex-col gap-6 pl-0">
        <!-- Language preference always visible -->
        <div>
            <label for="preferredLanguage" class="block text-sm font-medium text-slate-700 mb-1">
                {PREFERENCES_SCHEMA.preferredLanguage.formLabel}
            </label>
            <select 
                id="preferredLanguage"
                name="preferredLanguage"
                aria-label={PREFERENCES_SCHEMA.preferredLanguage.formLabel}
                aria-describedby="preferredLanguage-description"
                class="w-full px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
                {Object.values(PREFERENCES_SCHEMA.preferredLanguage.options).map(option => (
                    <option value={option.code}>
                        {option.name}
                    </option>
                ))}
            </select>
        </div>

        <!-- Simplified unit preference with summary -->
        <div>
            <label for="unitPreference" class="block text-sm font-medium text-slate-700 mb-1">
                {PREFERENCES_SCHEMA.unitPreference.formLabel}
            </label>
            <select 
                id="unitPreference"
                name="unitPreference"
                aria-label={PREFERENCES_SCHEMA.unitPreference.formLabel}
                aria-describedby="unitPreference-description"
                class="w-full px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
                {Object.values(PREFERENCES_SCHEMA.unitPreference.options).map(option => (
                    <option value={option.code}>
                        {option.name}
                    </option>
                ))}
            </select>
        </div>

        <!-- Advanced Options (expandable) using Alpine.js -->
        <div class="advanced-options" x-data="{ open: false }">
            <button 
                type="button" 
                class="text-sm text-indigo-600 hover:text-indigo-800 font-medium flex items-center"
                x-on:click="open = !open"
                :aria-expanded="open"
                aria-controls="advanced-options-content"
            >
                <svg 
                    xmlns="http://www.w3.org/2000/svg" 
                    class="h-4 w-4 mr-1 transition-transform" 
                    :class="{ 'rotate-90': open }"
                    fill="none" 
                    viewBox="0 0 24 24" 
                    stroke="currentColor"
                >
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
                Advanced Options
            </button>
            
            <div 
                id="advanced-options-content" 
                class="mt-4 pl-2 border-l-2 border-slate-200 space-y-6" 
                x-show="open" 
                x-transition:enter="transition ease-out duration-200"
                x-transition:enter-start="opacity-0 transform -translate-y-2"
                x-transition:enter-end="opacity-100 transform translate-y-0"
                x-transition:leave="transition ease-in duration-150"
                x-transition:leave-start="opacity-100 transform translate-y-0"
                x-transition:leave-end="opacity-0 transform -translate-y-2"
            >
                <!-- Time Format -->
                <div>
                    <label for="timeFormat" class="block text-sm font-medium text-slate-700 mb-1">
                        {PREFERENCES_SCHEMA.timeFormat.formLabel}
                    </label>
                    <select 
                        id="timeFormat"
                        name="timeFormat"
                        aria-label={PREFERENCES_SCHEMA.timeFormat.formLabel}
                        aria-describedby="timeFormat-description"
                        class="w-full px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                        {Object.values(PREFERENCES_SCHEMA.timeFormat.options).map(option => (
                            <option value={option.code}>
                                {option.name}
                            </option>
                        ))}
                    </select>
                </div>

                <!-- Daily Notification Time -->
                <div>
                    <label for="dailyNotificationTime" class="block text-sm font-medium text-slate-700 mb-1">
                        {PREFERENCES_SCHEMA.dailyNotificationTime.formLabel}
                    </label>
                    <select 
                        id="dailyNotificationTime"
                        name="dailyNotificationTime"
                        aria-label={PREFERENCES_SCHEMA.dailyNotificationTime.formLabel}
                        aria-describedby="dailyNotificationTime-description"
                        class="w-full px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                        {Object.values(PREFERENCES_SCHEMA.dailyNotificationTime.options).map(option => (
                            <option value={option.code}>
                                {option.name}
                            </option>
                        ))}
                    </select>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    import { IMPERIAL_COUNTRIES, LANGUAGE_OPTIONS } from "../../../shared/types/form.schema";

    
    function setInitialPreferences() {
        const languageSelect = document.getElementById('preferredLanguage') as HTMLSelectElement;
        const unitSelect = document.getElementById('unitPreference') as HTMLSelectElement;
        const timeFormatSelect = document.getElementById('timeFormat') as HTMLSelectElement;

        if (languageSelect && unitSelect && timeFormatSelect) {
            try {
                const [lang, region] = (navigator.language || 'en-US').split('-');
                
                languageSelect.value = lang && Object.keys(LANGUAGE_OPTIONS).includes(lang.toLowerCase())
                    ? lang.toLowerCase()
                    : 'en';
                
                unitSelect.value = region && !IMPERIAL_COUNTRIES.includes(region.toUpperCase() as typeof IMPERIAL_COUNTRIES[number])
                    ? 'metric'
                    : 'imperial';

                // Detect time format preference
                const formatter = new Intl.DateTimeFormat(navigator.language);
                const is12Hour = formatter.resolvedOptions().hour12;
                timeFormatSelect.value = is12Hour ? '12h' : '24h';

            } catch (error) {
                // If anything goes wrong, fall back to default values
                languageSelect.value = 'en';
                unitSelect.value = 'imperial';
                timeFormatSelect.value = '24h';
            }
        }
    }

    // Run initialization immediately
    setInitialPreferences();
</script> 
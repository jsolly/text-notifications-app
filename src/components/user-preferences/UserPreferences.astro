---
import {
	PREFERENCES_SCHEMA,
	type SelectField,
} from "../../../types/form.schema";
---

<section class="user-preferences">
    <h2 class="text-lg font-semibold text-slate-800 mb-6">Preferences</h2>
    <div class="flex flex-col gap-6">
        {Object.entries(PREFERENCES_SCHEMA)
            .filter((entry): entry is [string, SelectField] => entry[1].type === "select")
            .map(([name, field]) => (
                <div>
                    <label for={name} class="block text-sm font-medium text-slate-700 mb-1">
                        {field.formLabel}
                    </label>
                    <select 
                        id={name}
                        name={name}
                        class="w-full px-4 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                        {Object.values(field.options).map(option => (
                            <option value={option.code}>
                                {option.name}
                            </option>
                        ))}
                    </select>
                </div>
            ))
        }
    </div>
</section>

<script>
    import { IMPERIAL_COUNTRIES, LANGUAGE_OPTIONS } from "../../../types/form.schema";

    
    function setInitialPreferences() {
        const languageSelect = document.getElementById('preferred_language') as HTMLSelectElement;
        const unitSelect = document.getElementById('unit_preference') as HTMLSelectElement;
        const timeFormatSelect = document.getElementById('time_format') as HTMLSelectElement;

        if (languageSelect && unitSelect && timeFormatSelect) {
            try {
                const [lang, region] = (navigator.language || 'en-US').split('-');
                
                languageSelect.value = lang && Object.keys(LANGUAGE_OPTIONS).includes(lang.toLowerCase())
                    ? lang.toLowerCase()
                    : 'en';
                
                unitSelect.value = region && !IMPERIAL_COUNTRIES.includes(region.toUpperCase() as typeof IMPERIAL_COUNTRIES[number])
                    ? 'metric'
                    : 'imperial';

                // Detect time format preference
                const formatter = new Intl.DateTimeFormat(navigator.language, { 
                    hour: 'numeric',
                    hour12: undefined 
                } as const);
                const is12Hour = formatter.resolvedOptions().hour12 ?? true;
                timeFormatSelect.value = is12Hour ? '12h' : '24h';

            } catch (error) {
                // If anything goes wrong, fall back to default values
                languageSelect.value = 'en';
                unitSelect.value = 'imperial';
                timeFormatSelect.value = '24h';
            }
        }
    }

    // Run initialization immediately
    setInitialPreferences();
</script> 
name: Daily Automated Integration Tests

on:
  schedule:
    # Run every day at 1:00 AM UTC
    - cron: "0 1 * * *"

  # Allow manual triggering
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Parallel validation jobs
  lint:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

  type-check:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Run general type checking
        run: npm run check:typescript

  terraform-validation:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read Terraform version
        id: tf_version
        run: echo "version=$(printf '%s' "$(cat .terraform-version)")" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.tf_version.outputs.version }}

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ steps.tf_version.outputs.version }}-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-${{ steps.tf_version.outputs.version }}-

      - name: Run Terraform Validation
        run: npm run check:terraform

  build:
    runs-on: ubuntu-24.04-arm
    needs: [lint, type-check, terraform-validation]
    env:
      DATABASE_URL_TEST: ${{ secrets.DATABASE_URL_TEST }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      AWS_REGION: "us-east-1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: npm ci

      # Parallel builds for better performance
      - name: Build shared package
        run: npm run build:shared:ci &

      - name: Build frontend
        run: npm run build:frontend &

      - name: Wait for builds to complete
        run: wait

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ github.run_id }}
          path: |
            frontend/dist
            shared/dist

  test:
    runs-on: ubuntu-24.04-arm
    needs: build
    strategy:
      matrix:
        test-type: [unit, integration]
    env:
      DATABASE_URL_TEST: ${{ secrets.DATABASE_URL_TEST }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      AWS_REGION: "us-east-1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Download build outputs
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-${{ github.run_id }}
          path: .

      - name: Run ${{ matrix.test-type }} tests
        run: npm run test:${{ matrix.test-type }}

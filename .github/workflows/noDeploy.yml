name: No Deploy

on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Read Node.js version
        id: node_version
        run: echo "version=$(cat .nvmrc | sed 's/^v//' | tr -d '\n\r' | xargs)" >> $GITHUB_OUTPUT
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.node_version.outputs.version }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"
      - name: Install dependencies
        run: npm ci
      - name: Run linting
        run: npm run lint

  type-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Read Node.js version
        id: node_version
        run: echo "version=$(cat .nvmrc | sed 's/^v//' | tr -d '\n\r' | xargs)" >> $GITHUB_OUTPUT
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.node_version.outputs.version }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"
      - name: Install dependencies
        run: npm ci
      - name: Run type checking
        run: npm run check:typescript

  validate-terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Read Terraform version
        id: tf_version
        run: echo "version=$(printf '%s' "$(cat .terraform-version)")" >> $GITHUB_OUTPUT
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.tf_version.outputs.version }}
      - name: Run Terraform validation
        run: npm run check:terraform

  build-and-test:
    runs-on: ubuntu-latest
    needs: [lint, type-check, validate-terraform]
    env:
      DATABASE_URL_TEST: ${{ secrets.DATABASE_URL_TEST }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      AWS_REGION: "us-east-1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Read Node.js version
        id: node_version
        run: echo "version=$(cat .nvmrc | sed 's/^v//' | tr -d '\n\r' | xargs)" >> $GITHUB_OUTPUT
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.node_version.outputs.version }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"
      - name: Install dependencies
        run: npm ci

      - name: Cache shared dist
        id: cache-shared-dist
        uses: actions/cache@v4
        with:
          path: shared/dist
          key: ${{ runner.os }}-shared-dist-${{ hashFiles('shared/src/**/*.ts', 'shared/tsconfig.json', 'shared/package.json') }}

      - name: Build shared package
        if: steps.cache-shared-dist.outputs.cache-hit != 'true'
        run: npm run build:shared:ci

      - name: Build frontend
        run: npm run build:frontend

      - name: Run unit tests
        run: npm run test:unit 
name: Deploy Website

on:
  # Run on push to main
  push:
    branches:
      - main

  # Allow manual triggering
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Parallel validation and testing jobs
  lint:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read Node.js version
        id: node_version
        run: echo "version=$(cat .nvmrc | sed 's/^v//' | tr -d '\n\r' | xargs)" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.node_version.outputs.version }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        if: hashFiles('**/*.{js,ts,jsx,tsx,vue,astro}') != ''
        run: npm run lint

  type-check:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read Node.js version
        id: node_version
        run: echo "version=$(cat .nvmrc | sed 's/^v//' | tr -d '\n\r' | xargs)" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.node_version.outputs.version }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Run general type checking
        if: hashFiles('**/*.{ts,tsx}') != ''
        run: npm run check:typescript

  terraform-validation:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read Terraform version
        id: tf_version
        run: echo "version=$(printf '%s' "$(cat .terraform-version)")" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.tf_version.outputs.version }}

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ steps.tf_version.outputs.version }}-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-${{ steps.tf_version.outputs.version }}-

      - name: Run Terraform Validation
        if: hashFiles('**/*.tf') != ''
        run: npm run check:terraform

  test:
    runs-on: ubuntu-24.04-arm
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DATABASE_URL_TEST: ${{ secrets.DATABASE_URL_TEST }}
      PUBLIC_SIGNUP_API_URL: ${{ secrets.PUBLIC_SIGNUP_API_URL }}
      PUBLIC_TURNSTILE_SITE_KEY: ${{ secrets.PUBLIC_TURNSTILE_SITE_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY_URLS: ${{ secrets.ECR_REPOSITORY_URLS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read Node.js version
        id: node_version
        run: echo "version=$(cat .nvmrc | sed 's/^v//' | tr -d '\n\r' | xargs)" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.node_version.outputs.version }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Cache shared dist
        id: cache-shared-dist
        uses: actions/cache@v4
        with:
          path: shared/dist
          key: ${{ runner.os }}-shared-dist-${{ hashFiles('shared/src/**/*.ts', 'shared/tsconfig.json', 'shared/package.json') }}

      - name: Build shared package
        if: steps.cache-shared-dist.outputs.cache-hit != 'true'
        run: npm run build:shared:ci

      - name: Run unit tests
        run: npm run test:unit

  build-and-package:
    runs-on: ubuntu-24.04-arm
    needs: [lint, type-check, terraform-validation, test]
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DATABASE_URL_TEST: ${{ secrets.DATABASE_URL_TEST }}
      PUBLIC_SIGNUP_API_URL: ${{ secrets.PUBLIC_SIGNUP_API_URL }}
      PUBLIC_TURNSTILE_SITE_KEY: ${{ secrets.PUBLIC_TURNSTILE_SITE_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY_URLS: ${{ secrets.ECR_REPOSITORY_URLS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read Node.js version
        id: node_version
        run: echo "version=$(cat .nvmrc | sed 's/^v//' | tr -d '\n\r' | xargs)" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.node_version.outputs.version }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Cache shared dist
        id: cache-shared-dist
        uses: actions/cache@v4
        with:
          path: shared/dist
          key: ${{ runner.os }}-shared-dist-${{ hashFiles('shared/src/**/*.ts', 'shared/tsconfig.json', 'shared/package.json') }}

      - name: Build shared package
        if: steps.cache-shared-dist.outputs.cache-hit != 'true'
        run: npm run build:shared:ci

      - name: Build frontend
        run: npm run build:frontend

      - name: Upload shared build artifact
        uses: actions/upload-artifact@v4
        with:
          name: shared-dist-artifact-${{ github.run_id }}
          path: shared/dist

      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist-artifact-${{ github.run_id }}
          path: frontend/dist

  deploy-lambdas:
    needs: build-and-package
    runs-on: ubuntu-24.04-arm
    env:
      ECR_REPOSITORY_URLS: ${{ secrets.ECR_REPOSITORY_URLS }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # AWS and ECR Setup
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::730335616323:role/GitHubActionsDeploymentRole
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Download shared build artifact
        uses: actions/download-artifact@v4
        with:
          name: shared-dist-artifact-${{ github.run_id }}
          path: shared/dist

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install lambda dependencies
        run: npm ci --workspace=backend --include-workspace-root=false --no-save

      # Build and Deploy Lambda Containers
      - name: Build and push Lambda containers
        working-directory: backend/functions
        run: ./build.sh

  deploy-frontend:
    needs: build-and-package
    runs-on: ubuntu-24.04-arm
    env:
      STATIC_WEBSITE_BUCKET: ${{ secrets.STATIC_WEBSITE_BUCKET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::730335616323:role/GitHubActionsDeploymentRole
          aws-region: us-east-1

      # Frontend Download Build Artifact And Deploy
      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist-artifact-${{ github.run_id }}
          path: frontend/dist
      - name: Deploy to S3
        run: cd frontend/dist && aws s3 sync --delete ./ s3://${{ secrets.STATIC_WEBSITE_BUCKET }}
